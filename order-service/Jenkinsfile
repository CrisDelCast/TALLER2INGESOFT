pipeline {
    agent any

    environment {
        MAVEN_OPTS = '-Dmaven.repo.local=.m2/repository'
        SERVICE_NAME = 'order-service'
        REGISTRY_URL = 'ecommerceacr.azurecr.io'
        ACR_CREDENTIALS_ID = 'your-acr-jenkins-credentials-id'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üì¶ Clonando c√≥digo fuente...'
                checkout scm
            }
        }

        stage('Build & Package') {
            steps {
                dir("${SERVICE_NAME}") {
                    echo 'üî® Compilando el proyecto con Maven...'
                    sh 'mvn clean package -X > maven-build-debug.log 2>&1'
                }
            }
        }

        stage('Unit Tests') {
            steps {
                dir("${SERVICE_NAME}") {
                    echo 'üß™ Ejecutando pruebas unitarias...'
                    sh 'mvn test'
                }
            }
            post {
                always {
                    echo 'üìÑ Publicando resultados de pruebas...'
                    junit "${SERVICE_NAME}/target/surefire-reports/*.xml"
                }
            }
        }

        stage('Build & Tag Docker Image') {
            steps {
                echo 'üê≥ Construyendo imagen Docker...'
                script {
                    env.IMAGE_TAG = "${env.BUILD_NUMBER}"
                    docker.build("${REGISTRY_URL}/${SERVICE_NAME}:${env.IMAGE_TAG}", "./${SERVICE_NAME}")
                    echo "‚úÖ Imagen construida: ${REGISTRY_URL}/${SERVICE_NAME}:${env.IMAGE_TAG}"
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                echo 'üöÄ Subiendo imagen a ACR...'
                script {
                    docker.withRegistry("https://${REGISTRY_URL}", ACR_CREDENTIALS_ID) {
                        def image = docker.image("${REGISTRY_URL}/${SERVICE_NAME}:${env.IMAGE_TAG}")
                        image.push()
                        echo "‚úÖ Imagen enviada: ${REGISTRY_URL}/${SERVICE_NAME}:${env.IMAGE_TAG}"
                    }
                }
            }
        }

        stage('Deploy to Kubernetes (Stage)') {
            steps {
                echo 'üö¢ Desplegando en Kubernetes...'
                script {
                    sh """
                        kubectl set image deployment/${SERVICE_NAME} ${SERVICE_NAME}=${REGISTRY_URL}/${SERVICE_NAME}:${env.IMAGE_TAG} -n default
                        kubectl rollout status deployment/${SERVICE_NAME} -n default
                    """
                    echo "‚úÖ Despliegue completado para ${SERVICE_NAME} con la imagen ${env.IMAGE_TAG}"
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                echo 'üì¶ Archivando artefactos...'
                archiveArtifacts artifacts: "${SERVICE_NAME}/target/*.jar", fingerprint: true
            }
        }
    }

    post {
        always {
            echo 'üßπ Limpiando workspace...'
            // cleanWs()
        }
        success {
            echo '‚úÖ ¬°Pipeline completada con √©xito!'
        }
        failure {
            echo '‚ùå ¬°La pipeline fall√≥!'
        }
    }
}
