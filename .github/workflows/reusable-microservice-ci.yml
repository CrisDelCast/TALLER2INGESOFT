name: Reusable Microservice CI/CD

# 1. TRIGGER: Este workflow ahora es "invocable" desde otros workflows.
on:
  workflow_call:
    # 2. INPUTS: Define los datos que este workflow espera recibir de quien lo llame.
    inputs:
      service_name:
        description: 'El nombre del microservicio (ej. product-service)'
        required: true
        type: string
      service_path:
        description: 'La ruta al directorio del microservicio (ej. ./product-service)'
        required: true
        type: string
    # 3. SECRETS: Define los secretos que deben ser pasados desde el workflow que lo llama.
    secrets:
      ACR_NAME:
        required: true
      AKS_CLUSTER_NAME:
        required: true
      AKS_RESOURCE_GROUP:
        required: true
      AZURE_CREDENTIALS:
        required: true
      AZURE_CLIENT_ID:
        required: true
      AZURE_CLIENT_SECRET:
        required: true
      SONAR_ORGANIZATION:
        required: true
      SONAR_TOKEN:
        required: true
      SONAR_PROJECT_KEY:
        required: true

jobs:
  build_and_deploy:
    name: Build & Deploy ${{ inputs.service_name }}
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven

    # Usa el input 'service_path' para apuntar al directorio correcto
    - name: Build with Maven
      run: mvn clean package -DskipTests
      working-directory: ${{ inputs.service_path }}

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        # SonarCloud necesita saber el nombre del proyecto y la organización.
        # Usamos el nombre del servicio como nombre del proyecto.
        args: >
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
          -Dsonar.projectName=${{ inputs.service_name }}
          -Dsonar.sources=${{ inputs.service_path }}
          -Dsonar.projectBaseDir=.
          -Dsonar.java.binaries=${{ inputs.service_path }}/target/classes

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Usa los secretos que nos han pasado
    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_NAME }}.azurecr.io
        username: ${{ secrets.AZURE_CLIENT_ID }}
        password: ${{ secrets.AZURE_CLIENT_SECRET }}

    # Usa 'service_name' para la imagen y 'service_path' para el contexto del build
    - name: Build and push Docker image to ACR
      run: |
        docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/${{ inputs.service_name }}:${{ github.sha }} .
        # Subimos la imagen DESPUÉS del escaneo de Trivy.
        # docker push ${{ secrets.ACR_NAME }}.azurecr.io/${{ inputs.service_name }}:${{ github.sha }}
      working-directory: ${{ inputs.service_path }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
        ignorefile: '.trivy/ignored-vulnerabilities.txt'

    - name: Push Docker image if scan passed
      run: |
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/${{ inputs.service_name }}:${{ github.sha }}
      working-directory: ${{ inputs.service_path }}
      
    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        # Usa los secretos que nos han pasado
        resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
        cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
        
    # Usa 'service_name' para el nombre del deployment y del contenedor
    - name: Deploy to AKS
      run: |
        kubectl set image deployment/${{ inputs.service_name }} ${{ inputs.service_name }}=${{ secrets.ACR_NAME }}.azurecr.io/${{ inputs.service_name }}:${{ github.sha }} -n default

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/${{ inputs.service_name }} -n default 