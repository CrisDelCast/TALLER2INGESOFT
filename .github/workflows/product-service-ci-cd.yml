name: Product Service CI/CD

# 1. TRIGGER: Se activa con un push o pull request a la rama 'main', 
# pero solo para cambios dentro del directorio 'product-service'.
on:
  push:
    branches:
      - main
    paths:
      - 'product-service/**'
  pull_request:
    branches:
      - main
    paths:
      - 'product-service/**'

# Variables de entorno disponibles para todos los jobs
env:
  ACR_NAME: ecommerceacr            
  AKS_CLUSTER_NAME: ecommerceaks    
  AKS_RESOURCE_GROUP: ecommerce-rg
  IMAGE_NAME: product-service    

jobs:
  build_and_push_image:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
    # 2. CHECKOUT: Clona tu repositorio para que el pipeline pueda acceder al código.
    - name: Checkout repository
      uses: actions/checkout@v3

    # 3. SETUP JAVA & MAVEN: Instala Java 11 para construir el proyecto.
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven

    # 4. BUILD JAR: Ejecuta Maven para compilar y empaquetar el código en un .jar.
    #    working-directory asegura que el comando se ejecute en la carpeta del microservicio.
    - name: Build with Maven
      run: mvn clean package -DskipTests
      working-directory: ./product-service

    # 5. AZURE LOGIN: Se autentica en Azure usando el secreto que creaste.
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # 6. BUILD & PUSH DOCKER IMAGE: 
    #    Construye la imagen y la sube a ACR.
    #    Usa el GitHub SHA (identificador único del commit) como etiqueta para la imagen.
    #    Esto asegura que cada push tenga una imagen única.
    - name: Build and push Docker image to ACR
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_NAME }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }} # Secreto que debes crear en GitHub
        password: ${{ secrets.ACR_PASSWORD }} # Secreto que debes crear en GitHub
        
    - run: |
        docker build ./product-service -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
      
  deploy_to_aks:
    name: Deploy to AKS
    needs: build_and_push_image # Este job depende del anterior. No se ejecuta si el build falla.
    runs-on: ubuntu-latest

    steps:
    # 7. CHECKOUT: Clona el repositorio de nuevo para tener acceso a los manifiestos de k8s.
    - name: Checkout repository
      uses: actions/checkout@v3

    # 8. AZURE LOGIN: Se autentica en Azure de nuevo.
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # 9. SET AKS CONTEXT: Configura kubectl para que apunte a tu clúster de AKS.
    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ env.AKS_RESOURCE_GROUP }}
        cluster-name: ${{ env.AKS_CLUSTER_NAME }}

    # 10. DEPLOY: Usa kubectl para aplicar el manifiesto.
    #     OJO: Este es el paso que iremos mejorando. Por ahora, asumimos que tienes un manifiesto base.
    #     La forma más simple de actualizar la imagen es con `kubectl set image`.
    - name: Deploy to AKS
      run: |
        kubectl set image deployment/product-service-deployment product-service=${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} -n default
    
    # 11. VERIFY DEPLOYMENT: Revisa que el despliegue se haya completado exitosamente.
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/product-service-deployment -n default 
