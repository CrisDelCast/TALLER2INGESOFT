pipeline {
    agent any

    environment {
        MAVEN_OPTS = '-Dmaven.repo.local=.m2/repository'
        SERVICE_NAME = 'product-service' // ¡Cambiado!
        REGISTRY_URL = 'ecommerceacr.azurecr.io' // Tu registro ACR
        ACR_CREDENTIALS_ID = 'your-acr-jenkins-credentials-id' // ¡Cambia esto por el ID de tus credenciales de ACR en Jenkins!
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out code...'
                checkout scm
            }
        }

        stage('Build & Package') {
            steps {
                echo 'Building and packaging the service...'
                dir("${SERVICE_NAME}") { // ¡Cambiado!
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Unit Tests') {
            steps {
                echo 'Running unit tests...'
                dir("${SERVICE_NAME}") { // ¡Cambiado!
                    sh 'mvn test'
                }
            }
            post {
                always {
                    publishTestResults testResultsPattern: "${SERVICE_NAME}/target/surefire-reports/*.xml" // ¡Cambiado!
                }
            }
        }

        stage('Build & Tag Docker Image') {
            steps {
                echo 'Building Docker image...'
                script {
                    env.IMAGE_TAG = "${env.BUILD_NUMBER}"
                    def image = docker.build("${REGISTRY_URL}/${SERVICE_NAME}:${env.IMAGE_TAG}", "./${SERVICE_NAME}") // ¡Cambiado!
                    echo "Docker image built: ${REGISTRY_URL}/${SERVICE_NAME}:${env.IMAGE_TAG}"
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                echo 'Logging into Docker registry and pushing image...'
                script {
                    docker.withRegistry("https://${REGISTRY_URL}", ACR_CREDENTIALS_ID) {
                        def image = docker.image("${REGISTRY_URL}/${SERVICE_NAME}:${env.IMAGE_TAG}")
                        image.push()
                        echo "Docker image pushed: ${REGISTRY_URL}/${SERVICE_NAME}:${env.IMAGE_TAG}"
                    }
                }
            }
        }

        stage('Deploy to Kubernetes (Stage)') {
            steps {
                echo 'Deploying Product Service to Kubernetes Stage environment...'
                script {
                    sh "kubectl set image deployment/${SERVICE_NAME} ${SERVICE_NAME}=${REGISTRY_URL}/${SERVICE_NAME}:${env.IMAGE_TAG} -n default" // ¡Cambiado!
                    sh "kubectl rollout status deployment/${SERVICE_NAME} -n default" // ¡Cambiado!
                    echo "Deployment of ${SERVICE_NAME} with image ${REGISTRY_URL}/${SERVICE_NAME}:${env.IMAGE_TAG} complete."
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                echo 'Archiving artifacts...'
                archiveArtifacts artifacts: "${SERVICE_NAME}/target/*.jar", fingerprint: true // ¡Cambiado!
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace...'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}